--- # Start
name: example

# 유저의 github 저장소 정보
url:
docker-image: 

# predefined docker-image를 사용하되, 추가적인 설정이 필요한 경우 이렇게 정의
extra-build-env-setting-commands: 

test-candidates: |
  example.c

time-out: 3600
max-patch-number : 500

test-build-command: | # 테스트 빌드 커맨드 / defect4cpp 기준 meta.json의 내용이 필요
  ./autogen.sh
  ./configure
  make
  [ -f AUTOMAKE_TEST_CASE.output ] || make --directory tests -p | sed -n "s/^TESTS[^_]=[[:blank:]]*//p" | tr ' ' '\n' > AUTOMAKE_TEST_CASE.output

coverage-build-command: | # 커버리지 빌드 커맨드 / defect4cpp 기준 meta.json의 내용이 필요(SBFL: gcov)
  ./autogen.sh
  ./configure CFLAGS="--coverage -g -O0"
  make
  [ -f AUTOMAKE_TEST_CASE.output ] || make --directory tests -p | sed -n "s/^TESTS[^_]=[[:blank:]]*//p" | tr ' ' '\n' > AUTOMAKE_TEST_CASE.output


# 테스트 type이 문제: gtest의 경우 원하는 테스트를 실행할 수 있으니 문제가 없음
# 그렇지 않으면 test-case에 실행할 테스트 번호를 range로 하도록함
# 테스트 실행 역시 range안에 있는 테스트들만 실행하도록 묶어서 command를 부르거나 여러번 불러야함
test-type: automake
test-list: | # 테스트 리스트 커맨드 / 테스트를 하나씩 실행하기 위해 테스트 리스트를 출력해주는 내용 필요
  index=$(cat)
test-case: |
  index=0; make TESTS=\"$(sed -n $(sed -n \"${index}p\" < AUTOMAKE_TEST_CASE.output)\"

test-command: | # 테스트 실행
  bash -c "@testcase@"

test-coverage-command: | # 커버리지 테스트 실행 / 테스트 대상을 입력받아서 하나씩 실행할 수 있어야 함
  bash -c "@testcase@"